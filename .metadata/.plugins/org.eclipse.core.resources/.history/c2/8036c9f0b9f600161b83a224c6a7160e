package view;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;

import bean.ChatMessage;
import bean.ChatMessage.Action;
import service.ClientService;

import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JList;
import javax.swing.JOptionPane;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class ClientFrame extends JFrame {

	private JPanel contentPane;
	private JTextField txtName;
	private Socket socket;
	private ChatMessage message;
	private ClientService service;
	private JTextArea txtMessage;
	private JTextArea txtRecive;
	private JButton btconect;
	private JButton btnSair;
	private JButton btsend;
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ClientFrame frame = new ClientFrame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}


	public ClientFrame() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 466, 335);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(null, "Conectar", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel.setBounds(12, 12, 329, 55);
		contentPane.add(panel);
		panel.setLayout(null);

		txtName = new JTextField();
		txtName.setBounds(12, 24, 114, 19);
		panel.add(txtName);
		txtName.setColumns(10);

	    btconect = new JButton("Conectar");
		btconect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				String name = txtName.getText();

				if (!name.isEmpty()) {
					message = new ChatMessage();
					message.setAction(Action.CONNECT);
					message.setName(name);

					service = new ClientService();
					socket = service.connect();

					new Thread(new ListenerSocket(socket)).start();

					service.send(message);
				}
			}
		});
		btconect.setBounds(138, 24, 100, 19);
		panel.add(btconect);
		
	    btnSair = new JButton("Sair");
		btnSair.setEnabled(false);
		btnSair.setBounds(251, 24, 66, 19);
		panel.add(btnSair);

		JPanel panel_1 = new JPanel();
		panel_1.setBorder(new TitledBorder(null, "Online", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel_1.setBounds(353, 12, 97, 252);
		contentPane.add(panel_1);
		panel_1.setLayout(null);

		JList listOnlineUsers = new JList();
		listOnlineUsers.setBounds(12, 23, 73, 217);
		panel_1.add(listOnlineUsers);

		JPanel panel_2 = new JPanel();
		panel_2.setBounds(22, 79, 319, 185);
		contentPane.add(panel_2);
		panel_2.setLayout(null);

		txtRecive = new JTextArea();
		txtRecive.setEditable(false);
		txtRecive.setBounds(0, 0, 319, 130);
		panel_2.add(txtRecive);

		JTextArea txtMessage = new JTextArea();
		txtMessage.setEnabled(false);
		txtMessage.setBounds(0, 144, 319, 41);
		panel_2.add(txtMessage);

	    btsend = new JButton("Enviar");
		btsend.setEnabled(false);
		btsend.setBounds(133, 274, 117, 25);
		contentPane.add(btsend);
	}

	private class ListenerSocket implements Runnable {

		private ObjectInputStream input;


		public ListenerSocket(Socket socket) {
			try {
				this.input = new ObjectInputStream(socket.getInputStream());
			} catch (IOException ex) {
				Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

		@Override
		public void run() {
			ChatMessage message = null;
			try {
				while ((message = (ChatMessage) input.readObject()) != null) {
					Action action = message.getAction();

					if (action.equals(Action.CONNECT)) {
						conected(message);
					} else if (action.equals(Action.DISCONNECT)) {
						socket.close();
					} else if (action.equals(Action.SEND_ONE)) {

					} else if (action.equals(Action.USERS_ONLINE)) {
					}



				}
			} catch (ClassNotFoundException ex) {
				Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);

			} catch (IOException ex) {
				Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
			}
		}

	}
	public void conected(ChatMessage message){
		if(message.getText().equals("NO")){
			txtName.setText("");
			JOptionPane.showInternalMessageDialog(null,"Conexão não realizada, tente novamente com outro nome");
			return;
		}
		this.message = message;
		this.btconect.setEnabled(false);
		this.btnSair.setEnabled(true);
		this.txtMessage.setEnabled(true);
		this.txtName.setEditable(false);
		this.btsend.setEnabled(true);
		txtRecive.append(message.getName()+"\n");
		JOptionPane.showMessageDialog(null,"Você está Conectado");
	}
	
	public void disconnect(ChatMessage message){
		try {
			this.socket.close();
			this.btconect.setEnabled(true);
			this.txtName.setEnabled(true);
			this.txtMessage.setEnabled(false);
			this.btnSair.setEnabled(false);
			JOptionPane.showConfirmDialog(null, "Você saiu da sala")
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
